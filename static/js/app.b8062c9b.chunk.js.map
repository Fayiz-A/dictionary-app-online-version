{"version":3,"sources":["components/appbar.tsx","components/button.tsx","databases/dictionary.ts","App.tsx"],"names":["AppHeader","props","View","style","styles","container","Text","textStyle","this","title","React","StyleSheet","create","fontSize","fontWeight","shadowColor","shadowOffset","width","height","shadowOpacity","shadowRadius","elevation","alignItems","justifyContent","backgroundColor","CustomButton","buttonSurrounding","TouchableOpacity","button","onPress","Component","color","borderRadius","marginTop","marginLeft","fontFamily","dictionary","App","state","onTextInputFieldChanged","text","setState","textEntered","fetchResponse","a","async","length","alert","toLowerCase","trim","replaceAll","dictionaryResult","wordPresentInDictionary","dictionaryWordJson","dictionaryResultRenderingDetailList","textInputContainer","TextInput","textInput","onChangeText","value","Dimensions","get","dictionaryResultSurrounding","map","renderDetails","dictionaryResultText","dictionaryResultCategories","paddingLeft","borderWidth","borderColor","paddingTop","paddingBottom"],"mappings":"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","file":"static/js/app.b8062c9b.chunk.js","sourcesContent":["import * as React from 'react';\nimport { TouchableOpacity, StyleSheet, Text, View } from 'react-native';\n\nexport interface Props {\n  title: String,\n}\n\nclass AppHeader extends React.Component<Props> {\n  constructor(props: Props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <View style={styles.container}>\n        <Text style={styles.textStyle}>{this.props.title}</Text>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  textStyle: {\n    fontSize: 20,\n    fontWeight: \"bold\"\n  },\n  container: {\n    shadowColor: 'black',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.5,\n    shadowRadius: 2,\n    elevation: 2,    \n    alignItems: \"center\",\n    justifyContent: \"center\",\n    height: 60,\n    backgroundColor: \"cyan\"\n  },\n});\n\nexport default AppHeader;","//importing the libraries\nimport React, { Component } from 'react';\nimport { Text, View, TouchableOpacity, StyleSheet, ColorValue } from 'react-native';\n\nexport interface Props {\n   onPress: () => any,\n   title: String,\n   color: ColorValue,\n   width: number,\n   marginTop: number,\n   marginLeft: number\n}\n\nexport default class CustomButton extends Component<Props> {\n\n   constructor(props: Props) {\n      super(props);\n\n   }\n\n  render() {\n    return (\n      <View style={styles(this.props).buttonSurrounding}>\n        <TouchableOpacity\n          style={styles(this.props).button}\n          onPress={this.props.onPress()}>\n          <Text style={styles(this.props).textStyle}>{this.props.title}</Text>\n        </TouchableOpacity>\n      </View>\n    );\n  }\n}\n\nconst styles = (props: Props) =>\n  StyleSheet.create({\n    button: {\n      backgroundColor: props.color,\n      justifyContent: 'center',\n      alignItems: 'center',\n      width: props.width,\n      height: 45,\n      borderRadius: 25\n    },\n    buttonSurrounding: {\n      marginTop: props.marginTop,\n      marginLeft: props.marginLeft,\n    },\n    textStyle: {\n      fontSize: 20,\n      color: 'white',\n      fontFamily: 'cursive',\n      fontWeight: 'bold',\n    },\n  });\n","const dictionary:any = {\n   \"the\" : {\n     \"word\" : \"the\",\n     \"lexicalCategory\":\"Determiner\",\n     \"definition\" : \"denoting one or more people or things already mentioned or assumed to be common knowledge.\"\n   },\n   \"india\" : {\n     \"word\" : \"India\",\n     \"lexicalCategory\":\"Noun\",\n     \"definition\" :\"a country in southern Asia occupying the greater part of the Indian subcontinent; population 1,311,000,000 (estimated 2015); official languages, Hindi and English (fourteen other languages are recognized as official in certain regions; of these, Bengali, Gujarati, Marathi, Tamil, Telugu, and Urdu have most first-language speakers); capital, New Delhi.\"\n   },\n   \"externally\" : {\n     \"word\" : \"externally\",\n     \"lexicalCategory\":\"Adverb\",\n     \"definition\" : \"with reference to the outer surface or structure of something; outside\"\n   },\n   \"hello\" : {\n     \"word\" : \"hello\",\n     \"lexicalCategory\":\"Interjection\",\n     \"definition\" : \"used as a greeting or to begin a telephone conversation\"\n   },\n   \"welcome\" : {\n     \"word\" : \"welcome\",\n     \"lexicalCategory\":\"Noun\",\n     \"definition\" : \"an instance or manner of greeting someone\"\n   },\n   \"almost\" : {\n     \"word\" : \"almost\",\n     \"lexicalCategory\":\"Adverb\",\n     \"definition\" : \"not quite; very nearly\"\n   },\n   \"she\" : {\n     \"word\" : \"she\",\n     \"lexicalCategory\":\"Pronoun\",\n     \"definition\" : \"used to refer to a woman, girl, or female animal previously mentioned or easily identified\"\n   },\n   \"tree\" : {\n     \"word\" : \"tree\",\n     \"lexicalCategory\":\"Noun\",\n     \"definition\" : \"a woody perennial plant, typically having a single stem or trunk growing to a considerable height and bearing lateral branches at some distance from the ground.\"\n   },\n   \"wonderful\" : {\n     \"word\" : \"wonderful\",\n     \"lexicalCategory\":\"Adjective\",\n     \"definition\" : \"inspiring delight, pleasure, or admiration; extremely good; marvellous\"\n   },\n   \"ordinary\" : {\n     \"word\" : \"ordinary\",\n     \"lexicalCategory\":\"Adjective\",\n     \"definition\" : \"with no special or distinctive features; normal\"\n   }\n }\n \n export default dictionary","import React from 'react';\nimport { StyleSheet, Text, View, TextInput, Dimensions } from 'react-native';\nimport AppHeader from './components/appbar';\nimport CustomButton from './components/button';\nimport dictionary from './databases/dictionary';\n\nexport interface State {\n  textEntered: string,\n  dictionaryWordJson: any,\n  dictionaryResultRenderingDetailList: any[][],\n  wordPresentInDictionary: boolean\n}\n\nexport interface Props {\n\n}\n\nexport default class App extends React.Component<Props, State> {\n\n  constructor(state: State) {\n    super(state);\n\n    this.state = {\n      textEntered: '',\n      dictionaryWordJson: {},\n      dictionaryResultRenderingDetailList: [['Word: ', 'word'], ['Lexical Category: ', 'lexicalCategory'], ['Meaning: ', 'definition']],\n      wordPresentInDictionary: false\n    }\n  }\n\n  onTextInputFieldChanged = (text: string) => {\n    this.setState({\n      textEntered: text,\n    });\n  }\n\n  fetchResponse = async () => {\n    let textEntered: string = this.state.textEntered;\n\n    if (textEntered == null || textEntered.length == 0) {\n      alert('Please Enter a word to be search');\n      return null;\n    }\n\n    let text: string = this.state.textEntered.toLowerCase().trim().replaceAll(\" \", \"\");\n\n    let dictionaryResult: object = dictionary[text];\n\n    if (dictionaryResult == null) {\n      alert('This word doesn\\'t exist in our dictionary yet');\n      this.setState({\n        wordPresentInDictionary: false\n      })\n      return null;\n    } else {\n      this.setState({\n        dictionaryWordJson: dictionaryResult,\n        wordPresentInDictionary: true\n      });\n\n      return dictionaryResult;\n    }\n\n  }\n\n  render() {\n    return (\n      <View>\n        <AppHeader title='Dictionary App' />\n        <View style={styles.textInputContainer}>\n          <TextInput style={styles.textInput} onChangeText={this.onTextInputFieldChanged} value={this.state.textEntered} />\n        </View>\n        <View>\n          <CustomButton onPress={() => this.fetchResponse} color=\"red\" title=\"Search\" marginTop={20} marginLeft={Dimensions.get('window').width / 2 - (100 / 2)} width={100} />\n        </View>\n        <View style={styles.dictionaryResultSurrounding}>\n          <View >\n            {this.state.wordPresentInDictionary ? this.state.dictionaryResultRenderingDetailList.map((renderDetails: Array<string>) => (\n              <Text style={styles.dictionaryResultText}><Text style={styles.dictionaryResultCategories}>{renderDetails[0]} </Text><Text>{this.state.dictionaryWordJson[renderDetails[1]]}</Text></Text>\n            )):<View></View>}\n          </View>\n        </View>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  textInput: {\n    paddingLeft: 10,\n    backgroundColor: \"#ededed\",\n    borderWidth: 4,\n    borderColor: 'black',\n    width: Dimensions.get('window').width / 2,\n    height: Dimensions.get('window').height / 12,\n    borderRadius: Dimensions.get('window').height / 12,\n    fontSize: 20\n  },\n  textInputContainer: {\n    paddingLeft: (Dimensions.get('window').width - Dimensions.get('window').width / 2) / 2,\n    paddingTop: (Dimensions.get('window').height - Dimensions.get('window').height / 12) / 10\n  },\n  dictionaryResultSurrounding: {\n    paddingLeft: 20,\n    paddingTop: 20,\n    paddingBottom: 60\n  },\n  dictionaryResultCategories: {\n    color: \"orange\",\n    fontSize: 20,\n    fontWeight: \"bold\"\n  },\n  dictionaryResultText: {\n    fontSize: 20,\n  }\n});\n"],"sourceRoot":""}