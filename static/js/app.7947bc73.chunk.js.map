{"version":3,"sources":["components/appbar.tsx","components/button.tsx","App.tsx"],"names":["AppHeader","props","View","style","styles","container","Text","textStyle","this","title","React","StyleSheet","create","fontSize","fontWeight","shadowColor","shadowOffset","width","height","shadowOpacity","shadowRadius","elevation","alignItems","justifyContent","backgroundColor","CustomButton","buttonSurrounding","TouchableOpacity","button","onPress","Component","color","borderRadius","marginTop","marginLeft","fontFamily","App","state","onTextInputFieldChanged","text","setState","textEntered","fetchResponse","a","async","length","alert","url","toLowerCase","fetch","then","response","status","dictionaryWordJson","definitions","json","responseJson","dictionaryResultRenderingDetailList","textInputContainer","TextInput","textInput","onChangeText","value","Dimensions","get","dictionaryResultSurrounding","dictionaryResultText","dictionaryResultCategories","map","renderDetails","paddingLeft","borderWidth","borderColor","paddingTop","paddingBottom"],"mappings":"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","file":"static/js/app.7947bc73.chunk.js","sourcesContent":["import * as React from 'react';\nimport { TouchableOpacity, StyleSheet, Text, View } from 'react-native';\n\nexport interface Props {\n  title: String,\n}\n\nclass AppHeader extends React.Component<Props> {\n  constructor(props: Props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <View style={styles.container}>\n        <Text style={styles.textStyle}>{this.props.title}</Text>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  textStyle: {\n    fontSize: 20,\n    fontWeight: \"bold\"\n  },\n  container: {\n    shadowColor: 'black',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.5,\n    shadowRadius: 2,\n    elevation: 2,    \n    alignItems: \"center\",\n    justifyContent: \"center\",\n    height: 60,\n    backgroundColor: \"cyan\"\n  },\n});\n\nexport default AppHeader;","//importing the libraries\nimport React, { Component } from 'react';\nimport { Text, View, TouchableOpacity, StyleSheet, ColorValue } from 'react-native';\n\nexport interface Props {\n   onPress: () => any,\n   title: String,\n   color: ColorValue,\n   width: number,\n   marginTop: number,\n   marginLeft: number\n}\n\nexport default class CustomButton extends Component<Props> {\n\n   constructor(props: Props) {\n      super(props);\n\n   }\n\n  render() {\n    return (\n      <View style={styles(this.props).buttonSurrounding}>\n        <TouchableOpacity\n          style={styles(this.props).button}\n          onPress={this.props.onPress()}>\n          <Text style={styles(this.props).textStyle}>{this.props.title}</Text>\n        </TouchableOpacity>\n      </View>\n    );\n  }\n}\n\nconst styles = (props: Props) =>\n  StyleSheet.create({\n    button: {\n      backgroundColor: props.color,\n      justifyContent: 'center',\n      alignItems: 'center',\n      width: props.width,\n      height: 45,\n      borderRadius: 25\n    },\n    buttonSurrounding: {\n      marginTop: props.marginTop,\n      marginLeft: props.marginLeft,\n    },\n    textStyle: {\n      fontSize: 20,\n      color: 'white',\n      fontFamily: 'cursive',\n      fontWeight: 'bold',\n    },\n  });\n","import React from 'react';\nimport { StyleSheet, Text, View, TextInput, Dimensions } from 'react-native';\nimport AppHeader from './components/appbar';\nimport CustomButton from './components/button';\n\nexport interface State {\n  textEntered: string,\n  dictionaryWordJson: any,\n  dictionaryResultRenderingDetailList: any[][],\n}\n\nexport interface Props {\n\n}\n\nexport default class App extends React.Component<Props, State> {\n\n  constructor(state: State) {\n    super(state);\n\n    this.state = {\n      textEntered: '',\n      dictionaryWordJson: {\n        definitions: []\n      },\n      dictionaryResultRenderingDetailList: [['Lexical Category: ', 'wordtype'], ['Meaning: ', 'description']]\n    }\n  }\n\n  onTextInputFieldChanged = (text: string) => {\n    this.setState({\n      textEntered: text,\n    });\n  }\n\n  fetchResponse = async () => {\n    let textEntered: string = this.state.textEntered;\n\n    if (textEntered == null || textEntered.length == 0) {\n      alert('Please Enter a word to be search');\n      return null;\n    }\n\n    var url: string = \"https://rupinwhitehatjr.github.io/dictionary/\" + this.state.textEntered.toLowerCase() + \".json\";\n\n    return await fetch(url).then(response => {\n      if (response.status == 404) {\n        alert('This word doesn\\'t exist in our dictionary yet');\n        this.setState({\n          dictionaryWordJson: {\n            definitions: []\n          },\n        })\n        return null;\n      }\n      else if (response.status == 200) {\n        return response.json().then(responseJson => {\n          this.setState({\n            dictionaryWordJson: responseJson\n          })\n        })\n\n      }\n    }\n    );\n  }\n\n  render() {\n    return (\n      <View>\n        <AppHeader title='Dictionary App' />\n        <View style={styles.textInputContainer}>\n          <TextInput style={styles.textInput} onChangeText={this.onTextInputFieldChanged} value={this.state.textEntered} />\n        </View>\n        <View>\n          <CustomButton onPress={() => this.fetchResponse} color=\"red\" title=\"Search\" marginTop={20} marginLeft={Dimensions.get('window').width / 2 - (100 / 2)} width={100} />\n        </View>\n        <View style={styles.dictionaryResultSurrounding}>\n          <Text style={styles.dictionaryResultText}><Text style={styles.dictionaryResultCategories}>Word: </Text><Text>{this.state.textEntered}</Text></Text>\n          {this.state.dictionaryWordJson.definitions.map((dictionaryWordJson: any) => (\n            <View >\n              {this.state.dictionaryResultRenderingDetailList.map((renderDetails:Array<string>) => (\n                <Text style={styles.dictionaryResultText}><Text style={styles.dictionaryResultCategories}>{renderDetails[0]} </Text><Text>{dictionaryWordJson[renderDetails[1]]}</Text></Text>\n              ))}\n            </View>\n          ))}\n        </View>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  textInput: {\n    paddingLeft: 10,\n    backgroundColor: \"#ededed\",\n    borderWidth: 4,\n    borderColor: 'black',\n    width: Dimensions.get('window').width / 2,\n    height: Dimensions.get('window').height / 12,\n    borderRadius: Dimensions.get('window').height / 12,\n    fontSize: 20\n  },\n  textInputContainer: {\n    paddingLeft: (Dimensions.get('window').width - Dimensions.get('window').width / 2) / 2,\n    paddingTop: (Dimensions.get('window').height - Dimensions.get('window').height / 12) / 10\n  },\n  dictionaryResultSurrounding: {\n    paddingLeft: 20,\n    paddingTop: 20,\n    paddingBottom: 60\n  },\n  dictionaryResultCategories: {\n    color: \"orange\",\n    fontSize: 20,\n    fontWeight: \"bold\"\n  },\n  dictionaryResultText: {\n    fontSize: 20,\n  }\n});\n"],"sourceRoot":""}